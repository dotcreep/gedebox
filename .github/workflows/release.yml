name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.2'

      - name: Set variables
        run: |
          OS_LIST=("linux" "darwin" "windows")
          ARCH_LIST=("386" "amd64" "arm" "arm64")
  
      - name: Create build directory
        run: mkdir -p build

      - name: Build binary
        run: |
          for OS in "${OS_LIST[@]}"; do
            for ARCH in "${ARCH_LIST[@]}"; do
              if [ "$OS" = "windows" ]; then
                GOOS=$OS GOARCH=$ARCH go build -o build/gedebox-${OS}_${ARCH}.exe
              else
                GOOS=$OS GOARCH=$ARCH go build -o build/gedebox-${OS}_${ARCH}
              fi
            done
          done
          ls -la
          ls -la build
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            New Release Gedebox with version ${{ github.ref_name }}.
            - Package manager for Linux, Windows, and macOS.
            - Support AUR if exists.
            - Support SNAP if exists.
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}

      - name: Upload Release Assets
        run: |
          for file in $(ls build/gedebox-*); do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: application/octet-stream" \
                   --data-binary @"$file" \
                   "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename "$file")"
            else
              echo "File $file not found, skipping."
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
